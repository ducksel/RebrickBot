# analytics.py

import aiohttp
import os
import asyncio
import uuid

# –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GA_MEASUREMENT_ID = os.getenv("GA_MEASUREMENT_ID")
GA_API_SECRET = os.getenv("GA_API_SECRET")

def generate_client_id(user_id: int) -> str:
	"""
	–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç client_id, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è GA4, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ Telegram user_id.
	GA —Ç—Ä–µ–±—É–µ—Ç client_id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	UUIDv5 –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ user_id.
	"""
	return str(uuid.uuid5(uuid.NAMESPACE_DNS, f"tg-{user_id}"))

async def send_ga_event(
		user_id: int,
		event_name: str,
		params: dict = None,
		user_props: dict = None
	):
	"""
	–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ GA4 —á–µ—Ä–µ–∑ Measurement Protocol.
	
	:param user_id: Telegram user.id (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
	:param event_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: command_start, feature_used)
	:param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—ã—Ç–∏—è (feature, callback, error –∏ —Ç.–¥.)
	:param user_props: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ (username, language –∏ —Ç.–ø.)
	"""
	
	if not (GA_MEASUREMENT_ID and GA_API_SECRET):
		print("‚ùå GA config not found")
		return
	
	url = (
		f"https://www.google-analytics.com/mp/collect"
		f"?measurement_id={GA_MEASUREMENT_ID}&api_secret={GA_API_SECRET}"
	)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—ã—Ç–∏—è
	event_params = {
		"user_engagement": 1  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä GA4 –¥–ª—è —É—á–µ—Ç–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
	}
	
	if params:
		event_params.update(params)
	
	# user_properties ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ "–ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ—Ç—Å—è" –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	final_user_props = {}
	if user_props:
		final_user_props.update(user_props)
	
	payload = {
		"client_id": generate_client_id(user_id), # –Ω—É–∂–µ–Ω –¥–ª—è GA, –Ω–µ –≤–∏–¥–µ–Ω –≤ –æ—Ç—á–µ—Ç–∞—Ö
		"user_properties": {
			key: {"value": value}
			for key, value in final_user_props.items()
		},
		"events": [
			{
				"name": event_name,
				"params": event_params
			}
		]
	}
	
	# üëâ –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π payload –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	import json
	print("üì§ Sending GA event:")
	print(json.dumps(payload, indent=2, ensure_ascii=False))
	
	# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
	try:
		async with aiohttp.ClientSession() as session:
			async with session.post(url, json=payload) as response:
				if response.status != 204:
					print(f"‚ö†Ô∏è GA responded with {response.status}: {await response.text()}")
	except Exception as e:
		print(f"‚ö†Ô∏è Error sending GA event: {e}")


def track_command(user_id: int, command_name: str, username: str = None, language_code: str = None):
	"""
	–§–∏–∫—Å–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É (/start, /help –∏ —Ç.–ø.) —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	"""
	props = {
		"tg_user_id": str(user_id)  # ‚¨ÖÔ∏è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
	}
	if username:
		props["username"] = username
	if language_code:
		props["language"] = language_code

	asyncio.create_task(send_ga_event(
		user_id,
		event_name=f"command_{command_name}",
		user_props=props
	))

def track_feature(user_id: int, feature_name: str, username: str = None, language_code: str = None, params: dict = None):
	"""
	–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ ("text_query" –∏ —Ç.–ø.)
	"""
	props = {
		"tg_user_id": str(user_id)  # ‚¨ÖÔ∏è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
	}
	if username:
		props["username"] = username
	if language_code:
		props["language"] = language_code
	
	event_params = {"feature": feature_name}
	if params:
		event_params.update(params)
	
	asyncio.create_task(send_ga_event(
		user_id,
		event_name="feature_used",
		params=event_params,
		user_props=props
	))

def track_callback(user_id: int, callback_key: str, username: str = None, language_code: str = None):
	"""
	–§–∏–∫—Å–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
	–ü—Ä–∏–º–µ—Ä: callback = "pricing:42176-1"
	"""
	props = {
		"tg_user_id": str(user_id)  # ‚¨ÖÔ∏è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
	}
	if username:
		props["username"] = username
	if language_code:
		props["language"] = language_code

	asyncio.create_task(send_ga_event(
		user_id,
		event_name="callback_clicked",
		params={"callback": callback_key},
		user_props=props
	))


def track_error(user_id: int, error_code: str):
	"""
	–§–∏–∫—Å–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: timeouts, API failures, parsing issues
	"""
	asyncio.create_task(send_ga_event(
		user_id,
		event_name="error_occurred",
		params={"error": error_code}
	))