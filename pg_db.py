# pg_db.py

import os
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
DATABASE_URL = os.environ["DATABASE_URL"]

# ============================
# üì¶ –§–£–ù–ö–¶–ò–Ø: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´
# ============================
def init_db():
	"""
	–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É messages, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
	–¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç:
		- id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
		- title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
		- content: HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		- send_at: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (UTC)
		- sent: —Ñ–ª–∞–≥, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
	"""
	with psycopg2.connect(DATABASE_URL) as conn:
		with conn.cursor() as cur:
			# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
			cur.execute("""
				CREATE TABLE IF NOT EXISTS messages (
					id SERIAL PRIMARY KEY,
					title TEXT,
					content TEXT NOT NULL,
					send_at TIMESTAMP NOT NULL,
					sent BOOLEAN DEFAULT FALSE
				)
			""")
			# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			cur.execute("""
				CREATE TABLE IF NOT EXISTS users (
					user_id BIGINT PRIMARY KEY,
					username TEXT,
					first_name TEXT,
					last_name TEXT,
					language_code TEXT,
					is_bot BOOLEAN,
					is_premium BOOLEAN,
					started_at TIMESTAMP NOT NULL,
					blocked BOOLEAN DEFAULT FALSE
				)
			""")
		conn.commit()

# ============================
# ‚ûï –§–£–ù–ö–¶–ò–Ø: –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø
# ============================
def add_message(title: str, content: str, send_at: datetime):
	"""
	–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±—É–¥—É—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.
	–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
		- title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–º–æ–∂–Ω–æ None)
		- content: HTML-—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç–æ–º
		- send_at: –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
	"""
	with psycopg2.connect(DATABASE_URL) as conn:
		with conn.cursor() as cur:
			cur.execute(
				"INSERT INTO messages (title, content, send_at) VALUES (%s, %s, %s)",
				(title, content, send_at)
			)
		conn.commit()

# ============================
# üì¨ –§–£–ù–ö–¶–ò–Ø: –ü–û–õ–£–ß–ï–ù–ò–ï –ì–û–¢–û–í–´–• –ö –û–¢–ü–†–ê–í–ö–ï
# ============================
def get_pending_messages(current_time: datetime):
	"""
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å.
	–£—Å–ª–æ–≤–∏—è:
		- —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (sent = FALSE)
		- –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –≤—Ä–µ–º—è <= current_time
	"""
	with psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor) as conn:
		with conn.cursor() as cur:
			cur.execute(
				"SELECT * FROM messages WHERE sent = FALSE AND send_at <= %s ORDER BY send_at ASC",
				(current_time,)
			)
			return cur.fetchall()

# ============================
# ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–û–ú–ï–¢–ö–ê –ö–ê–ö –û–¢–ü–†–ê–í–õ–ï–ù–ù–û–ì–û
# ============================
def mark_message_sent(message_id: int):
	"""
	–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è: –ø–æ–º–µ—á–∞–µ—Ç –µ–≥–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ.
	"""
	with psycopg2.connect(DATABASE_URL) as conn:
		with conn.cursor() as cur:
			cur.execute(
				"UPDATE messages SET sent = TRUE WHERE id = %s",
				(message_id,)
			)
		conn.commit()

# ============================
# üìö –§–£–ù–ö–¶–ò–Ø: –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ò–• –°–û–û–ë–©–ï–ù–ò–ô
# ============================
def get_recent_messages(limit=10):
	"""
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
	"""
	with psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor) as conn:
		with conn.cursor() as cur:
			cur.execute(
				"SELECT * FROM messages ORDER BY send_at DESC LIMIT %s",
				(limit,)
			)
			return cur.fetchall()

# ============================
# üë§ –§–£–ù–ö–¶–ò–Ø: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# ============================
def add_or_update_user(user):
	"""
	–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.
	–°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è:
		- user_id, username, –∏–º—è, —è–∑—ã–∫
		- —Å—Ç–∞—Ç—É—Å premium
		- –¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
	"""
	is_premium = getattr(user, "is_premium", None)

	with psycopg2.connect(DATABASE_URL) as conn:
		with conn.cursor() as cur:
			cur.execute("""
				INSERT INTO users (
					user_id, username, first_name, last_name,
					language_code, is_bot, is_premium, started_at
				)
				VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
				ON CONFLICT (user_id) DO UPDATE
				SET username = EXCLUDED.username,
					first_name = EXCLUDED.first_name,
					last_name = EXCLUDED.last_name,
					language_code = EXCLUDED.language_code,
					is_bot = EXCLUDED.is_bot,
					is_premium = EXCLUDED.is_premium
			""", (
				user.id,
				user.username,
				user.first_name,
				user.last_name,
				user.language_code,
				user.is_bot,
				is_premium,
				datetime.utcnow()
			))
		conn.commit()
